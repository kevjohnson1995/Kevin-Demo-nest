{
  "openapi": "3.0.0",
  "paths": {
    "/api": {
      "get": {
        "operationId": "get-order-details",
        "summary": "Order Details",
        "description": "Get the details of an existing order.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer token retrieved from the <code><a href='#operation/post-authenticate'>/authenticate</a></code> endpoint sent as `Bearer <token>`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "Must be set to `application/json`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDetailsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Forbidden"
                }
              }
            }
          },
          "409": {
            "description": "Validation errors found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrors"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "operationId": "place-order",
        "summary": "Place Order",
        "description": "Place a new order.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer token retrieved from the <code><a href='#operation/post-authenticate'>/authenticate</a></code> endpoint sent as `Bearer <token>`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "Must be set to `application/json`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The order request body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDetailsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Forbidden"
                }
              }
            }
          },
          "409": {
            "description": "Validation errors found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrors"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    }
  },
  "info": {
    "title": "API Demo",
    "description": "API Demo",
    "version": "1.0",
    "contact": {},
    "x-logo": {
      "url": "./company-logo.jpg",
      "altText": "Company Logo"
    }
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "Bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http",
        "description": "Access to any part of this API other than the <code><a href='#operation/post-authenticate'>/authenticate</a></code> endpoint requires bearer token authentication with a JSON Web Token (JWT).\n\nTo obtain an access token, send a request to the `/authenticate` endpoint using Basic authentication with the credentials provided by the onboarding team.\n\n> **NOTE:** Credentials will be different for the sandbox and production environments which means credentials for one environment cannot be used for the other.\n\n<br>\n<p class=\"code-title\">Request example</p>\n\n```sh\ncurl --request POST \\\n--location \"https://demo-api.com/api/authenticate\" \\\n--header \"Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=\" \\\n--header \"Content-Type: application/json\"\n```\n\n<br>\n<p class=\"code-title\">Response example</p>\n\n```json\n{ \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\" }\n```\n\n<br>\n<p class=\"code-title\">JWT request example</p>\n\n```sh\ncurl --request POST \\\n--location \"https://demo-api.com/api/criminal-search\" \\\n--header \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\" \\\n--header \"Content-Type: application/json\" \\\n--data \"{...}\"\n```\n\n<br>\n"
      }
    },
    "schemas": {
      "OrderDetailsResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "The current status of the order",
            "example": "Completed",
            "enum": [
              "Completed",
              "Order accepted - processing",
              "Order accepted - awaiting documentation"
            ],
            "minLength": 1
          },
          "completedOn": {
            "type": "string",
            "description": "The date this order was fulfilled\n      \n> **NOTE:** value will be `null` if order has not been fulfilled",
            "example": "2022-01-01",
            "pattern": "^d{4}-d{2}-d{2}$",
            "format": "date",
            "nullable": true
          },
          "result": {
            "type": "string",
            "description": "The result of the search",
            "example": "Clear",
            "enum": [
              "Clear",
              "Not Clear",
              "Unable to verify"
            ]
          }
        },
        "required": [
          "status",
          "completedOn",
          "result"
        ]
      },
      "BadRequest": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "minLength": 1,
            "example": "Bad request",
            "default": "Bad request"
          }
        },
        "required": [
          "message"
        ]
      },
      "Unauthorized": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "minLength": 1,
            "example": "Unauthorized",
            "default": "Unauthorized"
          }
        },
        "required": [
          "message"
        ]
      },
      "Forbidden": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "minLength": 1,
            "example": "Forbidden",
            "default": "Forbidden"
          }
        },
        "required": [
          "message"
        ]
      },
      "ValidationErrors": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "minLength": 1,
            "example": "Validation errors found",
            "default": "Validation errors found"
          }
        },
        "required": [
          "message"
        ]
      },
      "InternalServerError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "minLength": 1,
            "example": "Internal server error",
            "default": "Internal server error"
          }
        },
        "required": [
          "message"
        ]
      },
      "Order": {
        "type": "object",
        "properties": {
          "referenceId": {
            "type": "string",
            "description": "Unique ID to reference this order with",
            "example": "ABC-123",
            "minLength": 1
          },
          "firstName": {
            "type": "string",
            "description": "The first name to search on",
            "example": "John",
            "pattern": "^[A-Za-z0-9'-]{1,30}$",
            "minLength": 1,
            "nullable": false
          },
          "lastName": {
            "type": "string",
            "description": "The last name to search on",
            "example": "Smith",
            "pattern": "^[A-Za-z0-9'-]{1,30}$",
            "minLength": 1,
            "nullable": false
          },
          "searchType": {
            "type": "string",
            "description": "The search type to perform\n      \n- `CR` = Criminal\n      \n- `SO` = Sex Offender\n      \n- `MV` = Motor Vehicle\n      \n- `TN` = Tenant",
            "example": "CR",
            "enum": [
              "CR",
              "SO",
              "TN",
              "MV"
            ]
          }
        },
        "required": [
          "referenceId",
          "firstName",
          "lastName",
          "searchType"
        ]
      }
    }
  }
}